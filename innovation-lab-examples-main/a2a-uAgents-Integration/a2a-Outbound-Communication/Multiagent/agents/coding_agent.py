import json
import requests
from dotenv import load_dotenv
from a2a.server.agent_execution import AgentExecutor, RequestContext
from a2a.server.events import EventQueue
from a2a.types import Part, TextPart
from a2a.utils import new_agent_text_message
from typing_extensions import override

# Load environment variables
load_dotenv()

class CodingAgentExecutor(AgentExecutor):
    """Coding agent that specializes in code generation, debugging, and analysis."""
    
    def __init__(self):
        self.url = "https://api.asi1.ai/v1/chat/completions"
        self.api_key = os.getenv("ASI1_API_KEY")
        self.model = "asi1-mini"
        self.headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Authorization': f'Bearer {self.api_key}'
        }
        self.system_prompt = """You are a Senior Software Engineer AI agent. Your expertise includes:
1. Code generation in multiple programming languages
2. Code debugging and error fixing
3. Code review and optimization
4. Algorithm design and implementation
5. Best practices and design patterns
6. Testing and documentation

Coding Commands you can handle:
- CODE:[language]:[description] - Generate code
- DEBUG:[code] - Debug and fix code issues
- REVIEW:[code] - Review code quality
- OPTIMIZE:[code] - Optimize code performance
- EXPLAIN:[code] - Explain how code works
- TEST:[code] - Generate unit tests

Always provide clean, well-commented, production-ready code with explanations.
        """
    
    @override
    async def execute(self, context: RequestContext, event_queue: EventQueue) -> None:
        message_content = ""
        for part in context.message.parts:
            if isinstance(part, Part) and isinstance(part.root, TextPart):
                message_content = part.root.text
                break
        
        try:
            # Parse command if it's a structured coding request
            if message_content.startswith("CODE:"):
                await self._handle_code_command(message_content, event_queue)
            elif message_content.startswith("DEBUG:"):
                await self._handle_debug_command(message_content, event_queue)
            elif message_content.startswith("REVIEW:"):
                await self._handle_review_command(message_content, event_queue)
            elif message_content.startswith("OPTIMIZE:"):
                await self._handle_optimize_command(message_content, event_queue)
            elif message_content.startswith("EXPLAIN:"):
                await self._handle_explain_command(message_content, event_queue)
            elif message_content.startswith("TEST:"):
                await self._handle_test_command(message_content, event_queue)
            else:
                # General coding request
                await self._handle_general_request(message_content, event_queue)
                
        except Exception as e:
            await event_queue.enqueue_event(
                new_agent_text_message(f"‚ùå Coding error: {str(e)}")
            )
    
    async def _handle_code_command(self, command: str, event_queue: EventQueue):
        """Handle CODE:language:description commands."""
        parts = command.split(":", 2)
        if len(parts) < 3:
            await event_queue.enqueue_event(
                new_agent_text_message("‚ùå Usage: CODE:language:description (e.g., CODE:python:sort algorithm)")
            )
            return
        
        language = parts[1]
        description = parts[2]
        
        prompt = f"Generate {language} code for: {description}. Include comments and explanations."
        
        payload = json.dumps({
            "model": self.model,
            "messages": [
                {"role": "system", "content": self.system_prompt},
                {"role": "user", "content": prompt}
            ],
            "max_tokens": 2000,
            "temperature": 0.3,
            "stream": False
        })
        
        response = requests.post(self.url, headers=self.headers, data=payload)
        response.raise_for_status()
        code = response.json()['choices'][0]['message']['content']
        
        formatted_response = f"""üíª Coding Agent - Code Generation
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üîß Language: {language.title()}
üìã Task: {description}

{code}

‚úÖ Code generated by AI Senior Software Engineer
        """
        
        await event_queue.enqueue_event(new_agent_text_message(formatted_response))
    
    async def _handle_general_request(self, message_content: str, event_queue: EventQueue):
        """Handle general coding requests."""
        payload = json.dumps({
            "model": self.model,
            "messages": [
                {"role": "system", "content": self.system_prompt},
                {"role": "user", "content": f"Coding Request: {message_content}"}
            ],
            "max_tokens": 1500,
            "temperature": 0.4,
            "stream": False
        })
        
        response = requests.post(self.url, headers=self.headers, data=payload)
        response.raise_for_status()
        content = response.json()['choices'][0]['message']['content']
        
        formatted_response = f"""üíª Coding Agent Response
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìã Request: {message_content}

{content}

‚úÖ Response by AI Senior Software Engineer
        """
        
        await event_queue.enqueue_event(new_agent_text_message(formatted_response))
    
    @override
    async def cancel(self, context: RequestContext, event_queue: EventQueue) -> None:
        await event_queue.enqueue_event(new_agent_text_message("Coding task cancelled."))
    
    # Placeholder methods for other commands (same structure, omitted for brevity)
    async def _handle_debug_command(self, command: str, event_queue: EventQueue):
        pass
    
    async def _handle_review_command(self, command: str, event_queue: EventQueue):
        pass
    
    async def _handle_optimize_command(self, command: str, event_queue: EventQueue):
        pass
    
    async def _handle_explain_command(self, command: str, event_queue: EventQueue):
        pass
    
    async def _handle_test_command(self, command: str, event_queue: EventQueue):
        pass